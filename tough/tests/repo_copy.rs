// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT OR Apache-2.0

use std::fs::File;
use std::io::Read;
use std::path::{Path, PathBuf};
use tempfile::TempDir;
use tough::{Limits, Repository, Settings};
use url::Url;
use utl::{dir_url, test_data};

mod utl;

/// Test that `tough` can process repositories generated by [`tuf`], the reference Python
/// implementation.
///
/// [`tuf`]: https://github.com/theupdateframework/tuf
#[test]
fn test_repo_save() {
    // load the reference implementation tuf repo
    let base = test_data().join("tuf-reference-impl");
    let datastore = TempDir::new().unwrap();

    let metadata_base_url = &dir_url(base.join("metadata"));
    let targets_base_url = &dir_url(base.join("targets"));

    let repo = Repository::load(
        &tough::FilesystemTransport,
        Settings {
            root: File::open(base.join("metadata").join("1.root.json")).unwrap(),
            datastore: datastore.as_ref(),
            metadata_base_url,
            targets_base_url,
            limits: Limits::default(),
        },
    )
    .unwrap();

    // TODO create and use tempdirs

    let targets_subset = vec!["file1.txt".to_string(), "file2.txt".to_string()];
    repo.save(
        "/Users/mjb/Desktop/metadata",
        "/Users/mjb/Desktop/targets",
        Some(&targets_subset),
        true,
    )
    .unwrap();

    // check that we can load the copied repo.
    let copied_repo = Repository::load(
        &tough::FilesystemTransport,
        Settings {
            root: File::open(base.join("metadata").join("1.root.json")).unwrap(),
            datastore: datastore.as_ref(),
            metadata_base_url: "file:///Users/mjb/Desktop/metadata",
            targets_base_url: "file:///Users/mjb/Desktop/targets",
            limits: Limits::default(),
        },
    )
    .unwrap();
}
